{"version":3,"sources":["components/Tabs.tsx","components/ClubsList.tsx","App.tsx","helpers/api.tsx","index.tsx"],"names":["Tabs","filters","callback","type","filterType","className","map","item","cn","active","key","onClick","ClubsList","list","link","href","src","logo","alt","title_short","title","App","useState","clubList","setClubList","currentFilter","setCurrentFilter","currentActivityFilter","setCurrentActivityFilter","filtersArr","setFiltersArr","getClubList","fetch","then","data","json","tabs","useCallback","city","Set","citiesFilter","useEffect","console","log","filteredClubList","useMemo","filter","includes","activity","find","value","Boolean","filtersActivity","result","reduce","prev","concat","activityFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAUaA,EAAwB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAC/D,OACE,yBAAKC,UAAWF,GAEdF,EAAQK,KAAI,SAAAC,GAAI,OACd,4BACEF,UAAWG,IAAG,CAACC,OAAQF,IAASH,IAChCD,KAAK,SACLO,IAAKH,EACLI,QAAS,kBAAMT,EAASK,KAEvBA,QCfEK,EAA6B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3C,OACE,4BAEIA,EAAKP,KAAI,SAAAC,GAAI,OACX,wBAAIG,IAAKH,EAAKO,MACZ,uBAAGC,KAAMR,EAAKO,MACZ,yBAAKE,IAAKT,EAAKU,KAAMC,IAAKX,EAAKY,cAC/B,4BAAKZ,EAAKa,cCyGTC,G,MAjHH,WAAO,IAAD,EACgBC,mBAAiB,IADjC,mBACTC,EADS,KACCC,EADD,OAE0BF,mBAAiB,IAF3C,mBAETG,EAFS,KAEMC,EAFN,OAG0CJ,mBAAiB,IAH3D,mBAGTK,EAHS,KAGcC,EAHd,OAIoBN,mBAAmB,IAJvC,mBAITO,EAJS,KAIGC,EAJH,KAiDVC,EAAc,WCpDbC,MAHG,6DAGQC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UDsD/BF,MAAK,SAAAC,GAAI,OAAIV,EAAYU,OAGxBE,EAAOC,uBAAY,WACvB,OAjDmB,WACnB,IAAMpC,EAAmBsB,EAASjB,KAAI,SAAAC,GAAI,OAAIA,EAAK+B,KAAKlB,SAGxDU,EAAc,YAAI,IAAIS,IAActC,KA6C7BuC,KACN,CAACjB,IAEJkB,qBAAU,WACRV,MACC,IAEHU,qBAAU,WACRL,MACC,CAACA,IAEJM,QAAQC,IAAIpB,GAEZ,IAAMqB,EAAmBC,mBAAQ,WAC/B,OAAOtB,EAASuB,QACd,SAAAvC,GAAI,OACFA,EAAK+B,KAAKlB,MAAM2B,SAAStB,IACtBlB,EAAKyC,SAASC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,EAAM9B,MAAM2B,SAASpB,YAGhE,CAACJ,EAAUE,EAAeE,IAEvByB,EAAkBP,mBAAQ,WAC9B,OAjEqB,WACrB,IAMMQ,EANuBT,EAAiBtC,KAAI,SAAAC,GAAI,OAAIA,EAAKyC,YAEtCM,QAAO,SAACC,EAAMhD,GACrC,OAAOgD,EAAKC,OAAOjD,KAClB,IAEqBD,KAAI,SAAAC,GAAI,OAAIA,EAAKa,SAGzC,OAAO,YAAI,IAAImB,IAAcc,IAuDtBI,KACN,CAACb,IAEJ,OACE,yBAAKvC,UAAU,OACb,4BACAF,KAAK,SACLQ,QAzCiB,WACnBiB,EAAyB,IACzBF,EAAiB,MAqCf,SAOA,qEACA,kBAAC,EAAD,CACEzB,QAAS4B,EACT3B,SAnEsB,SAACgD,GAM3BxB,EALKwB,IAAUzB,EAKEyB,EAJE,KAkEf/C,KAAK,OACLC,WAAYqB,IAGd,mGACA,kBAAC,EAAD,CACExB,QAASmD,EACTlD,SAlEwB,SAACgD,GAM7BtB,EALKsB,IAAUvB,EAKUuB,EAJE,KAiEvB/C,KAAK,WACLC,WAAYuB,IAGd,kBAAC,EAAD,CACEd,KAAM+B,OE5Gdc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0af19f66.chunk.js","sourcesContent":["import React from 'react';\r\nimport cn from 'classnames';\r\n\r\ntype Props = {\r\n  filters: string[];\r\n  callback: (value: string) => void;\r\n  type: string;\r\n  filterType: string;\r\n}\r\n\r\nexport const Tabs: React.FC<Props> = ({ filters, callback, type, filterType }) => {\r\n  return (\r\n    <div className={type}>\r\n      {\r\n      filters.map(item => (\r\n        <button\r\n          className={cn({active: item === filterType})}\r\n          type=\"button\"\r\n          key={item}\r\n          onClick={() => callback(item)}\r\n        >\r\n          {item}\r\n        </button>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n  list: Club[];\r\n}\r\n\r\nexport const ClubsList: React.FC<Props> = ({ list }) => {\r\n  return (\r\n    <ul>\r\n      {\r\n        list.map(item => (\r\n          <li key={item.link}>\r\n            <a href={item.link}>\r\n              <img src={item.logo} alt={item.title_short}/>\r\n              <h2>{item.title}</h2>\r\n            </a>\r\n          </li>\r\n        ))\r\n      }\r\n    </ul>\r\n  )\r\n}","import React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { getDataFromServer } from './helpers/api';\nimport { Tabs } from './components/Tabs';\nimport { ClubsList } from './components/ClubsList';\nimport './App.scss';\n\nconst App = () => {\n  const [clubList, setClubList] = useState<Club[]>([]);\n  const [currentFilter, setCurrentFilter] = useState<string>('');\n  const [currentActivityFilter, setCurrentActivityFilter] = useState<string>('');\n  const [filtersArr, setFiltersArr] = useState<string[]>([]);\n\n  const citiesFilter = () => {\n    const filters:string[] = clubList.map(item => item.city.title);\n\n    // @ts-ignore\n    setFiltersArr([...new Set<string[]>(filters)]);\n  }\n\n  const activityFilter = () => {\n    const filters:Activity[][] = filteredClubList.map(item => item.activity);\n\n    const filtered = filters.reduce((prev, item) => {\n      return prev.concat(item);\n    }, []);\n\n    const result = filtered.map(item => item.title)\n\n    // @ts-ignore\n    return [...new Set<string[]>(result)]\n  }\n\n  const changeCurrentFilter = (value: string) => {\n    if ( value === currentFilter) {\n      setCurrentFilter('');\n      return;\n    }\n\n    setCurrentFilter(value);\n  }\n\n  const changeCurrentActivity = (value: string) => {\n    if ( value === currentActivityFilter) {\n      setCurrentActivityFilter('');\n      return;\n    }\n\n    setCurrentActivityFilter(value);\n  }\n\n  const resetFilters = () => {\n    setCurrentActivityFilter('');\n    setCurrentFilter('');\n  }\n\n  const getClubList = () => {\n    getDataFromServer()\n      .then(data => setClubList(data))\n  }\n\n  const tabs = useCallback(() => {\n    return citiesFilter();\n  }, [clubList])\n\n  useEffect(() => {\n    getClubList();\n  }, [])\n\n  useEffect(() => {\n    tabs();\n  }, [tabs])\n\n  console.log(clubList)\n\n  const filteredClubList = useMemo(() => {\n    return clubList.filter(\n      item => (\n        item.city.title.includes(currentFilter)\n        && item.activity.find((value => Boolean(value.title.includes(currentActivityFilter))))\n      )\n    );\n  }, [clubList, currentFilter, currentActivityFilter])\n\n  const filtersActivity = useMemo(() => {\n    return activityFilter();\n  }, [filteredClubList]);\n\n  return (\n    <div className=\"app\">\n      <button\n      type=\"button\"\n      onClick={resetFilters}\n      >\n        reset\n      </button>\n\n      <h2>Города:</h2>\n      <Tabs\n        filters={filtersArr}\n        callback={changeCurrentFilter}\n        type=\"city\"\n        filterType={currentFilter}\n      />\n\n      <h2>Направления:</h2>\n      <Tabs\n        filters={filtersActivity}\n        callback={changeCurrentActivity}\n        type=\"activity\"\n        filterType={currentActivityFilter}\n      />\n\n      <ClubsList\n        list={filteredClubList}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const URL = 'https://instasport.co/dashboard/api/v1/clubs/?format=json';\r\n\r\nexport const getDataFromServer = () => {\r\n  return fetch(URL).then(data => data.json());\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}